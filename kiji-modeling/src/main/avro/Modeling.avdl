/**
 * (c) Copyright 2013 WibiData, Inc.
 *
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This protocol defines avro objects used for serialization of model definitions and model
 * environments to/from JSON. Some of these records are also used in the return types of methods
 * defined in the ModelDefinition and ModelEnvironment classes.
 */
@namespace("org.kiji.modeling.avro")
protocol Modeling {
  /**
   * A specification for a single phase of the model lifecycle, consisting of the class that
   * implements the functionality of the phase and the corresponding extractor class that will be
   * used to treat the inputs to the phase.
   */
  record AvroPhaseDefinition {
    /**
     * Fully qualified class name of the class that will manipulate the input sources in this phase.
     * This class must implement the extractor trait. Optional.
     */
    union{null, string} extractor_class = null;

    /**
     * Fully qualified class name of the class to use in this phase. This class must implement the
     * appropriate trait for the phase. Required.
     */
    string phase_class;
  }

  /**
   * A specification of the computational phases defining a model workflow.
   *
   * Currently this consists of four phases:
   * - Prepare
   * - Train
   * - Score
   * - Evaluate
   */
  record AvroModelDefinition {
    // Shared fields -------------------------------------------------------------------------------
    /**
     * User specified shorthand identifier for this model definition. Required.
     */
    string name;

    /**
     * User specified version number for this model definition. Required.
     */
    string version;

    /**
     * Unique identifier for this model definition.
     */
    string protocol_version = "model_definition-0.4.0";

    // Model lifecycle fields ----------------------------------------------------------------------
    /**
     * Specification for the prepare phase. The class within must implement the preparer trait.
     * Set this field to null to specify that no prepare phase should be used.
     */
    union{null, string} preparer_class = null;

    /**
     * Specification for the train phase. The class within must implement the trainer trait.
     * Set this field to null to specify that no train phase should be used.
     */
    union{null, string} trainer_class = null;

    /**
     * Specification for the score phase. The class within must implement the scorer trait.
     * Set this field to null to specify that no score phase should be used.
     */
    union{null, AvroPhaseDefinition} scorer_phase = null;

    /**
     * Specification for the evaluate phase. The class within must implement the DistanceFn
     * object. Set this field to null to specify that no evaluator phase should be used.
     */
    union{null, string} evaluator_class = null;
  }

  /**
   * Arbitrary name-value pairs.
   */
  record AvroProperty {
    /**
     * An identifier for a property. Required.
     */
    string name;

    /**
     * The value for the associated property. Required.
     */
    string value;
  }

  // TODO(EXP-52): Add support for SEQ (sequence files) and TEXT (text files).
  /**
   * An enumeration of supported types of KeyValueStores.
   */
  enum AvroKeyValueStoreType {
    AVRO_KV,
    AVRO_RECORD,
    KIJI_TABLE,
    TEXT_FILE
  }

  /**
   * A specification of all the resources needed to surface data from a backing store.
   */
  record AvroKeyValueStoreSpec {
    /**
     * The type of this key-value store. Required.
     */
    AvroKeyValueStoreType store_type;

    /**
     * User specified shorthand identifier for a key value store. Required.
     */
    string name;

    /**
     * Other properties that may be needed to instantiate and configure a kv store reader.
     */
    array<AvroProperty> properties = [];
  }

  /**
   * Note: The following 3 record types defined below, relating to column filters,
   * correspond to their respective HBase filters.
   */

  /**
   * Specification of a ColumnRangeFilter.
   */
  record AvroColumnRangeFilter {
    /** The minimum qualifier bound. null means none.*/
    union{null, string} min_qualifier;

    /** Whether to include the lower bound. */
    boolean min_included;

    /** The maximum qualifier bound. null means none.*/
    union{null, string} max_qualifier;

    /** Whether to include the upper bound. */
    boolean max_included;
  }

  /**
   * Specification of a RegexQualifierFilter.
   */
  record AvroRegexQualifierFilter {
    /**
     * Regular expression for qualifiers that should be accepted by this filter. The expression is
     * matched against the full qualifier (as if it implicitly starts with '^' and ends with '$').
     */
    string regex;
  }

  /**
   * Specification of a filter. Only one of the fields in this record should not be null at any
   * point.
   *
   * Note to developers: Please be sure to update any avro filter validation code when modifying
   * this record.
   */
  record AvroFilter {
    /**
     * The 'and' filter specification. Filters out any fields that do not pass any of this 'and'
     * filter's components. This should be null if this record does not represent an 'and' filter.
     */
    union{null, array<AvroFilter>} and_filter = null;

    /**
     * The 'or' filter specification. Filters out any fields that do not pass all of this 'or'
     * filter's components. This should be null if this record does not represent an 'or' filter.
     */
    union{null, array<AvroFilter>} or_filter = null;

    /**
     * The column range filter specification. This should be null if this record does not
     * represent an column range filter.
     */
    union{null, AvroColumnRangeFilter} range_filter = null;

    /**
     * The regex filter specification. This should be null if this record does not represent
     * an regex filter.
     */
    union{null, AvroRegexQualifierFilter} regex_filter = null;
  }

  /** Schema for Avro Specific Records.  Need to save class name and schema. */
  record AvroSpecificSchemaSpec {
    string class_name;
    string schema_string;
  }

  /** Schema spec for column requests */
  record AvroSchemaSpec {
    // a null schema spec => use SchemaSpec.Writer (therefore no boolean field for "writer" here)
    boolean default_reader = false;
    union{null, string} generic = null;
    union{null, AvroSpecificSchemaSpec} specific = null;
  }

  /** Specification for fetching data from fully-qualified columns. */
  record AvroQualifiedColumnRequestInput {
    /** The name of the column family */
    string family;

    /** The name of the column qualifier */
    string qualifier;

    /**
     * Maximum number of the most recent versions of a particular column to return. Default is 1.
     */
    int max_versions = 1;

    /** A ColumnFilter to attach to the column. Potentially null. */
    union{null, AvroFilter} filter = null;

    /**
     * The maximum number of cells to keep in memory when paging.  Paging is
     * disabled by default, or when page_size = 0.
     */
    int page_size = 0;

    /** Schema spec.  Default is writer schema. */
    union{null, AvroSchemaSpec} schema_spec = null;
  }

  /** Specification for fetching data for a column family. */
  record AvroColumnFamilyRequestInput {
    /** The name of the column family */
    string family;

    /**
     * Maximum number of the most recent versions of a particular column to return. Default is 1.
     */
    int max_versions = 1;

    /** A ColumnFilter to attach to the column. Potentially null. */
    union{null, AvroFilter} filter = null;

    /**
     * The maximum number of cells to keep in memory when paging.  Paging is
     * disabled by default, or when page_size = 0.
     */
    int page_size = 0;

    /** Schema spec.  Default is writer schema. */
    union{null, AvroSchemaSpec} schema_spec = null;
  }

  /** The range for cell timestamps to use when retrieving data. */
  record AvroTimeRange {
    /**
     * Defines the smallest timestamp that cells returned should have, inclusive. This field may be
     * 0 if no lower bound on timestamps should be imposed. The default value of this field is 0.
     */
    long min_timestamp = 0;

    /**
     * Defines the largest timestamp that cells returned should have exclusive. This field may be
     * the maximum possible timestamp (9223372036854775807) if no upper bound on timestamps should
     * be imposed. The default value of this field is 9223372036854775807.
     */
    long max_timestamp = 9223372036854775807;
  }

  /** The mapping from input columns to Scalding fields. */
  record AvroInputFieldBinding {
    /** The input column (fully-qualified or a family).  Required. */
    union{AvroQualifiedColumnRequestInput, AvroColumnFamilyRequestInput} column;

    /** The Scaling field.  Required. */
    string tuple_field_name;
  }

  /** Configuration necessary to use a Kiji table as a data source. */
  record AvroKijiInputSpec {
    /** Kiji URI addressing the table that this input spec will use. Required. */
    string table_uri;

    /** Timestamp range into which cells must exist to be retrieved.  Required. */
    AvroTimeRange time_range;

    /** Associations between input column specifications and field names.  Required. */
    array<AvroInputFieldBinding> columns_to_fields;
  }

  /** Specification for fetching data for a column family. */
  record AvroQualifiedColumnRequestOutput {
    /** The name of the column family */
    string family;

    /** The name of the column qualifier */
    string qualifier;

    /** Schema spec.  Default is writer schema. */
    union{null, AvroSchemaSpec} schema_spec = null;
  }

  /** Specification for fetching data for a column family. */
  record AvroColumnFamilyRequestOutput {
    /** The name of the column family */
    string family;

    /**
     * Specifies a Scalding field that contains the name of the qualifier to
     * write the data to. Required.
     */
    string qualifier_selector;

    /** Schema spec.  Default is writer schema. */
    union{null, AvroSchemaSpec} schema_spec = null;
  }

  /** The mapping from input columns to Scalding fields. */
  record AvroOutputFieldBinding {
    /** The Scaling field.  Required. */
    string tuple_field_name;

    /** The output column (fully-qualified or a family).  Required. */
    union{AvroQualifiedColumnRequestOutput, AvroColumnFamilyRequestOutput} column;
  }

  /** Configuration necessary to use a Kiji table as a data sink. */
  record AvroKijiOutputSpec {
    /** Kiji URI addressing the table that this output spec will use. Required. */
    string table_uri;

    /** Timestamp for the output cells. */
    union{null, string} timestamp_field = null;

    /** Associations between field names and output column specifications.  Required. */
    array<AvroOutputFieldBinding> fields_to_columns;
  }

  /**
   * Configuration necessary to specify a single output Kiji column. Typically used with the score
   * phase.
   */
  record AvroKijiSingleColumnOutputSpec {
    /** Kiji URI addressing the table that this output spec will use. Required. */
    string table_uri;

    /** The Kiji column to write the output of the phase to. Required. */
    union{AvroQualifiedColumnRequestOutput, AvroColumnFamilyRequestOutput} output_column;
  }

  /**
   * Configuration necessary to use a Text file as a data source or sink.
   */
  record AvroTextSourceSpec {
    /**
     * HDFS path to the text file that this spec will use. Required.
     */
    string file_path;
  }

  /**
   * Configuration necessary to use a Sequence file as a data source or sink.
   */
  record AvroSequenceFileSourceSpec {
    /**
     * HDFS path to the text file that this spec will use. Required.
     */
    string file_path;

    /**
     * Field that keys from this sequence file should be bound to. Both 'key_field' and
     * 'value_field' should be specified together.
     */
    union{null, string} key_field = null;

    /**
     * Field that values from this sequence file should be bound to. Both 'key_field' and
     * 'value_field' should be specified together.
     */
    union{null, string} value_field = null;
  }

  /**
   * Represents the configuration for an input data source.
   *
   * Note to developers: Please be sure to update any avro input spec validation code when modifying
   * this record.
   */
  record AvroInputSpec {
    /** Configuration for this input spec if a Kiji input spec is being used. */
    union{null, AvroKijiInputSpec} kiji_specification = null;

    /** Configuration for this input spec if a text file is being used. */
    union{null, AvroTextSourceSpec} text_specification = null;

    /** Configuration for this input spec if a sequence file is being used. */
    union{null, AvroSequenceFileSourceSpec} sequence_file_specification = null;
  }

  /**
   * Represents the configuration for an output data source.
   *
   * Note to developers: Please be sure to update any avro output spec validation code when
   * modifying this record.
   */
  record AvroOutputSpec {
    /** Configuration for this output spec if a Kiji output spec is being used. */
    union{null, AvroKijiOutputSpec} kiji_specification = null;

    /** Configuration for this output spec if a Kiji single column output spec is being used. */
    union{null, AvroKijiSingleColumnOutputSpec} kiji_column_specification = null;

    /** Configuration for this output spec if a text file is being used. */
    union{null, AvroTextSourceSpec} text_specification = null;

    /** Configuration for this output spec if a sequence file is being used. */
    union{null, AvroSequenceFileSourceSpec} sequence_file_specification = null;
  }

  /**
   * Runtime resource bindings for the prepare phase.
   *
   * Note to developers: Please increment the 'protocol_version' field in AvroModelEnvironment when
   * modifying this record.
   */
  record AvroPrepareEnvironment {
    /**
     * Defines the input data source that the prepare phase uses. Required.
     */
    map<AvroInputSpec> input_spec;

    /**
     * Defines the output data source that the prepare phase uses. Required.
     */
    map<AvroOutputSpec> output_spec;

    /**
     * The KVStores needed during the prepare phase. The default value of this field is the empty
     * list.
     */
    array<AvroKeyValueStoreSpec> kv_stores = [];
  }

  /**
   * Runtime resource bindings for the train phase.
   *
   * Note to developers: Please increment the 'protocol_version' field in AvroModelEnvironment when
   * modifying this record.
   */
  record AvroTrainEnvironment {
    /**
     * Defines the input data source that the train phase uses. Required.
     */
    map<AvroInputSpec> input_spec;

    /**
     * Defines the output data sources that the train phase uses. Required.
     */
    map<AvroOutputSpec> output_spec;

    /**
     * The KVStores needed during the train phase. The default value of this field is the empty
     * list.
     */
    array<AvroKeyValueStoreSpec> kv_stores = [];
  }

  /**
   * Runtime resource bindings for the score phase.
   *
   * Note to developers: Please increment the 'protocol_version' field in AvroModelEnvironment when
   * modifying this record.
   */
  record AvroScoreEnvironment {
    /**
     * Defines the input data source that the score phase uses. Required.
     */
    AvroKijiInputSpec input_spec;

    /**
     * A Kiji column to write the output of the score phase to. Required.
     */
    AvroKijiSingleColumnOutputSpec output_spec;

    /**
     * An array of KVStores needed during the score phase. The default value of this field is the
     * empty list.
     */
    array<AvroKeyValueStoreSpec> kv_stores = [];
  }

  /**
   * Runtime resource bindings for the evaluate phase.
   *
   * Note to developers: Please increment the 'protocol_version' field in AvroModelEnvironment when
   * modifying this record.
   */
  record AvroEvaluateEnvironment {
    /**
     * Defines the input data source that the evaluate phase uses. Required.
     */
    AvroKijiInputSpec input_spec;

    /**
     * Defines the output data sources that the evaluate phase uses. Required.
     */
    AvroOutputSpec output_spec;

    /**
     * An array of KVStores needed during the evaluate phase. The default value of this field is
     * the empty list.
     */
    array<AvroKeyValueStoreSpec> kv_stores = [];
  }

  /**
   * Runtime resource bindings for a model definition.
   */
  record AvroModelEnvironment {
    /**
     * Unique identifier for this model environment.
     */
    string protocol_version = "model_environment-0.4.0";

    /**
     * User specified shorthand identifier for this model environment. Required.
     */
    string name;

    /**
     * User specified version number for this particular model environment. Required.
     */
    string version;

    /**
     * Runtime bindings for data sources used in the prepare phase. Potentially null.
     */
    union{null, AvroPrepareEnvironment} prepare_environment = null;

    /**
     * Runtime bindings for data sources used in the train phase. Potentially null.
     */
    union{null, AvroTrainEnvironment} train_environment = null;

    /**
     * Runtime bindings for data sources used in the score phase. Potentially null.
     */
    union{null, AvroScoreEnvironment} score_environment = null;

    /**
     * Runtime bindings for data sources used in the evaluate phase. Potentially null.
     */
    union{null, AvroEvaluateEnvironment} evaluate_environment = null;
  }

}
