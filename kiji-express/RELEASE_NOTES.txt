
                             Kiji Express Release Notes

Version 0.7.0
  * EXP-62. Adds support for column filters defined in a
      ModelEnvironment.

Version 0.6.0
  * EXP-89. Allows users to specify qualifiers for columns in a
      map-type column family which need not start with an alphabetic
      character.
  * EXP-83. Adds additional methods to ColumnRequest that allow users
      to better specify default values for missing columns when
      reading rows from a Kiji table.
  * EXP-94. Allows users to write empty Avro lists or maps to Kiji.
  * EXP-95. Provides additional factory methods for creating an
      AvroRecord. An AvroRecord can now be created by calling the
      factory method AvroRecord, which may now accept a Map or a
      collection of tuples to use to populate the Avro record created.
  * EXP-96. Ensures that Kiji instances, tables, and columns used when
      authoring a MapReduce flow exist before launching any jobs.
  * EXP-93. Fixes a bug that prevented users from writing null values
      to columns of a Kiji table, where the schema permits it.
  * EXP-78. Ensures that all validation errors that exist in a model
      definition and environment are reported to the user at once.

Version 0.5.0
  * EXP-77. Allows Hadoop -D configuration flags to be passed from the
      command line when running scripts and compiled jobs.
  * EXP-85. Fixes a bug in which the packAvro method used an incorrect
      type conversion while building Avro records.
  * EXP-4. Adds the ability to write to map-type column families using
      a qualifier specified through a tuple field.
  * EXP-46. Adds a kiji-schema-shell extension which can be launched
      using the command `express schema-shell`. This extension can be
      used to run model lifecycle phases. This commit also completes the
      initial implementation of the KijiExpress model lifecycle.

Version 0.4.0
  * EXP-48. AvroRecords can be created with the apply method on a map, for example:
      AvroRecord("fieldname1" -> "stringvalue", "fieldname2" -> 2L)
  * EXP-23. A Scala-friendly interface is provided for KijiMR key-value stores, for use with the
      KijiExpress modeling SPI.
  * EXP-37. Avro-generated Java classes are no longer required on the classpath to read Avro
      records from Kiji.  Avro records from Kiji are now read into a generic AvroRecord instead of
      the specific class; the treatment of non-records read from Kiji have not changed.  See the
      scaladocs for AvroList, AvroMap, and AvroRecord for syntax to access their elements, values,
      and fields.

Version 0.3.0
  * EXP-30. Allow users to run KijiSchema DDL Shell from KijiExpress Shell.
      From inside the KijiExpress Shell, the command :schema-shell will run a KijiSchema DDL Shell.
  * EXP-34.  There is now a KijiExpress Shell.
      A Scala shell preloaded for KijiExpress can now be run with the command "express shell
      --local" or "express shell --hdfs".  Once a pipe is fully specified from input to output,
      it can be run with "pipe.run".
  * EXP-25. Fixes EntityId's toJavaEntityId method.
      EntityId.getJavaEntityId has been renamed to EntityId.toJavaEntityId.
      Creating a HashedEntityId no longer errors. Components of HashedEntityIds cannot be accessed.

Version 0.2.0
  * CHOP-70. Deprecated the EXPRESS_CLASSPATH variable.
      Currently when specifying any third-party dependencies (job jar, dependency
      jars etc) when running the express command, the user must set the
      EXPRESS_CLASSPATH variable ahead of time. Now that variable is deprecated in
      favor of a command line option (--libjars) where the user can specify a colon
      separated list of dependency jars.
  * CHOP-63. Add a series of descriptive stats methods to KijiSlice.
      The following methods now exist on the KijiSlice class:
      ** min/max
      ** mean
      ** standard deviation
      ** variance
      There are two versions of each method:
      ** One that requires a function argument that returns a numeric value in case the
         underlying KijiSlice cell is a complex Avro type.
      ** One that assumes the underlying KijiSlice cell value is numeric (a convenience
         version of the above. Code won't compile if the underlying cell type is not numeric).
  * CHOP-22. Design how users interact with Entity IDs.
      EntityIds can be constructed by calling EntityId("kiji://my/table/uri", "component1", 2L, ...)
      This includes all types of entity ids, including composite.
  * CHOP-102. Scripts no longer need to import Scalding and KijiExpress.
      The following are now automatically imported when running a KijiExpress script:
      ** com.twitter.scalding._
      ** org.kiji.express._
      ** org.kiji.express.DSL._
  * CHOP-60. Fixes the build on OS X.
      Increased the heap size for the scala test to 2048m as a way to get the tests to pass.
