/**
 * (c) Copyright 2013 WibiData, Inc.
 *
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@namespace("org.kiji.scoring.avro")
/**
 * Avro records for storing KjiiFreshener entries.
 */
protocol KijiFreshenerRecords {

  /**
   * Enum to describe when the parameter is used.
   */
  enum ParameterScope {
    /** Parameter is only used at setup. */
    SETUP,
    /** Parameter is used for runtime scoring. */
    SCORING,
    /** Parameter is used at setup and scoring. */
    SETUP_AND_SCORING
  }

  /**
   * Record that describes the type and usage of a parameter.
   */
  record ParameterDescription {
    /** Type of the parameter, e.g. "int" */
    string type;

    /** User-friendly description of the parameter. */
    string description;

    /** Whether or not the parameter is required */
    boolean required;

    /** String representation of the default value (if not required) */
    union { null, string } default_value = null;

    /** Whether the parameter is used at setup or runtime (or both) */
    ParameterScope scope;
  }

  /**
   * Record that encapsulates everything needed to perform freshening.  Stored in a KijiMetaTable.
   */
  record KijiFreshenerRecord {
    /** Version string, for future compatibility. */
    string record_version = null;

    /** Fully qualified class of the KijiFreshnessPolicy to use to check for freshness. */
    union { null, string } freshness_policy_class = null;

    /** Fully qualified class of the ScoreFunction to run if data is stale. */
    union { null, string } score_function_class = null;

    /** Configuration parameters which will be passed to the freshness policy and score function. */
    map<string> parameters = {};

    /** Optional descriptions of the parameters. Map key is the parameter name. */
    map<ParameterDescription> descriptions = {};
  }
}
