#!/bin/bash
#
 # (c) Copyright 2013 WibiData, Inc.
 #
 # See the NOTICE file distributed with this work for additional
 # information regarding copyright ownership.
 #
 # Licensed under the Apache License, Version 2.0 (the "License");
 # you may not use this file except in compliance with the License.
 # You may obtain a copy of the License at
 #
 #     http://www.apache.org/licenses/LICENSE-2.0
 #
 # Unless required by applicable law or agreed to in writing, software
 # distributed under the License is distributed on an "AS IS" BASIS,
 # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 # See the License for the specific language governing permissions and
 # limitations under the License.

#
# Starts the kiji-rest service
#
# chkconfig: 345 90 10
# description: Kiji Rest Service
#

RETVAL=0
SLEEP_TIME=5
PROC_NAME="java"

RUNDIR="/var/run/kiji-rest"
PIDFILE="${RUNDIR}/kiji-rest.pid"
LOCKDIR="/var/lock/subsys"
LOCKFILE="$LOCKDIR/kiji-rest"
DESC="Kiji REST"

KIJI_REST_USER="kiji"
KIJI_REST_HOME="/opt/wibi/kiji-rest"

#Setup some directories
mkdir -p ${RUNDIR}

check_for_app() {
  if [ ! -e ${KIJI_REST_HOME} ]; then
    echo 'Kiji REST not installed!'
    exit 1
  fi
}

checkstatusofproc(){
  curl -s "http://localhost:8080" -o /dev/null
}

start() {

  echo "Starting ${DESC}: "
  su -s /bin/bash -c "PIDFILE=${KIJI_REST_HOME}/kiji-rest.pid ${KIJI_REST_HOME}/bin/kiji-rest" \
                    ${KIJI_REST_USER}

  mv ${KIJI_REST_HOME}/kiji-rest.pid ${RUNDIR}

  #Check that the server came up properly.
  for second in {30..0}
  do
    checkstatusofproc
    RETVAL=$?
    if [ ${RETVAL} == 0 ] ; then
      break
    fi
    sleep 2
  done

  if [ ${RETVAL} != 0 ]; then
    echo "${DESC} failed to start."
    rm -f ${PIDFILE}
  else
    touch $LOCKFILE
  fi

  return $RETVAL
}

stop() {
  echo "Stopping ${DESC}: "
  if [ ! -e ${PIDFILE} ]; then
    echo "${PIDFILE} not found."
    return 1
  fi

  pid=$(cat ${PIDFILE})
  kill $pid
  for second in {5..0}
  do
    checkstatusofproc
    RETVAL=$?
    if [ $RETVAL != 0 ] ; then
      break
    fi
    sleep 2
  done

  if [ ${RETVAL} == 0 ]; then
    echo "Force killing ${DESC} PID = ${pid}"
    kill -9 ${pid}
  fi

  rm -f $LOCKFILE $PIDFILE
  return 0
}

restart() {
  stop
  start
  return $?
}

checkstatus(){
  checkstatusofproc
  status=$?
  if [ $status == 0 ]; then
    echo "${DESC} is running"
  else
    echo "${DESC} is not running."
  fi

  return $status
}

condrestart(){
  [ -e $LOCKFILE ] && restart || :
}

check_for_root() {
  if [ $(id -ur) -ne 0 ]; then
    echo 'Error: root user required'
    echo
    exit 1
  fi
}

service() {
  case "$1" in
    start)
      check_for_root
      check_for_app
      start
      ;;
    stop)
      check_for_root
      check_for_app
      stop
      ;;
    status)
      checkstatus
      ;;
    restart)
      check_for_root
      check_for_app
      restart
      ;;
    condrestart|try-restart)
      check_for_root
      condrestart
      ;;
    *)
      echo $"Usage: $0 {start|stop|status|restart|try-restart|condrestart}"
      exit 1
  esac
}

service "$1"
RETVAL=$?
exit $RETVAL
