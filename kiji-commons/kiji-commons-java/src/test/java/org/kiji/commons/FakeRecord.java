/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.kiji.commons;
@SuppressWarnings("unchecked")
/** * Dummy Record. */
@org.apache.avro.specific.AvroGenerated
public class FakeRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FakeRecord\",\"namespace\":\"org.kiji.commons\",\"doc\":\"* Dummy Record.\",\"fields\":[{\"name\":\"data\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  private int data;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}.
   */
  public FakeRecord() {}

  /**
   * All-args constructor.
   */
  public FakeRecord(java.lang.Integer data) {
    this.data = data;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
      case 0: return data;
      default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
      case 0: data = (java.lang.Integer)value$; break;
      default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'data' field.
   */
  public java.lang.Integer getData() {
    return data;
  }

  /**
   * Sets the value of the 'data' field.
   * @param value the value to set.
   */
  public void setData(java.lang.Integer value) {
    this.data = value;
  }

  /** Creates a new FakeRecord RecordBuilder */
  public static org.kiji.commons.FakeRecord.Builder newBuilder() {
    return new org.kiji.commons.FakeRecord.Builder();
  }

  /** Creates a new FakeRecord RecordBuilder by copying an existing Builder */
  public static org.kiji.commons.FakeRecord.Builder newBuilder(org.kiji.commons.FakeRecord.Builder other) {
    return new org.kiji.commons.FakeRecord.Builder(other);
  }

  /** Creates a new FakeRecord RecordBuilder by copying an existing FakeRecord instance */
  public static org.kiji.commons.FakeRecord.Builder newBuilder(org.kiji.commons.FakeRecord other) {
    return new org.kiji.commons.FakeRecord.Builder(other);
  }

  /**
   * RecordBuilder for FakeRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FakeRecord>
      implements org.apache.avro.data.RecordBuilder<FakeRecord> {

    private int data;

    /** Creates a new Builder */
    private Builder() {
      super(org.kiji.commons.FakeRecord.SCHEMA$);
    }

    /** Creates a Builder by copying an existing Builder */
    private Builder(org.kiji.commons.FakeRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.data)) {
        this.data = data().deepCopy(fields()[0].schema(), other.data);
        fieldSetFlags()[0] = true;
      }
    }

    /** Creates a Builder by copying an existing FakeRecord instance */
    private Builder(org.kiji.commons.FakeRecord other) {
      super(org.kiji.commons.FakeRecord.SCHEMA$);
      if (isValidValue(fields()[0], other.data)) {
        this.data = data().deepCopy(fields()[0].schema(), other.data);
        fieldSetFlags()[0] = true;
      }
    }

    /** Gets the value of the 'data' field */
    public java.lang.Integer getData() {
      return data;
    }

    /** Sets the value of the 'data' field */
    public org.kiji.commons.FakeRecord.Builder setData(int value) {
      validate(fields()[0], value);
      this.data = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /** Checks whether the 'data' field has been set */
    public boolean hasData() {
      return fieldSetFlags()[0];
    }

    /** Clears the value of the 'data' field */
    public org.kiji.commons.FakeRecord.Builder clearData() {
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public FakeRecord build() {
      try {
        FakeRecord record = new FakeRecord();
        record.data = fieldSetFlags()[0] ? this.data : (java.lang.Integer) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
